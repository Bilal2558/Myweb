<svg width="202" height="14" viewBox="0 0 202 14" fill="none" xmlns="http://www.w3.org/2000/svg"><script xmlns="">(function() {
		window.addEventListener('message', function(event) {
			if (
				event.data &amp;&amp;
				event.data.id &amp;&amp;
				typeof event.data.id.startsWith === 'function' &amp;&amp;
				event.data.id.startsWith('adobeExperienceCloudDebuggerContentMessagingIdentifier-')
			) {
				event.stopImmediatePropagation();
			}
		},
		{capture: true});
	})();</script><script xmlns="">
		(function() {
			const contentScriptEventTrigger = function(data) {
				window.postMessage({ id:'adobeExperienceCloudDebuggerContentMessagingIdentifier-1', data: data });
			}
			const DATA_LAYER_LOCAL_STORAGE_KEY =
  "com.adobe.experiencePlatformDebugger.dataLayer.key";
const dataLayerKey = window.localStorage.getItem(DATA_LAYER_LOCAL_STORAGE_KEY);

if (dataLayerKey) {
  // sindresorhus/on-change
  // MIT - License
  // https://github.com/sindresorhus/on-change
  const PATH_SEPARATOR = ".";
  const TARGET = Symbol("target");
  const UNSUBSCRIBE = Symbol("unsubscribe");

  const isPrimitive = value =&gt;
    value === null ||
    (typeof value !== "object" &amp;&amp; typeof value !== "function");

  const isBuiltinWithoutMutableMethods = value =&gt;
    value instanceof RegExp || value instanceof Number;

  const isBuiltinWithMutableMethods = value =&gt; value instanceof Date;

  const concatPath = (path, property) =&gt; {
    let ret = path;
    if (property &amp;&amp; property.toString) {
      if (path) {
        ret += PATH_SEPARATOR;
      }

      ret += property.toString();
    }

    return ret;
  };

  const walkPath = (path, callback) =&gt; {
    let index;
    let remainingPath = path;
    while (remainingPath) {
      index = remainingPath.indexOf(PATH_SEPARATOR);

      if (index === -1) {
        index = remainingPath.length;
      }

      callback(remainingPath.slice(0, index));

      remainingPath = remainingPath.slice(index + 1);
    }
  };

  const shallowClone = value =&gt; {
    if (Array.isArray(value)) {
      return value.slice();
    }

    return { ...value };
  };

  const onChange = (object, updateDataLayer, options = {}) =&gt; {
    const proxyTarget = Symbol("ProxyTarget");
    let inApply = false;
    let changed = false;
    let applyPath;
    let applyPrevious;
    let isUnsubscribed = false;
    const equals = options.equals || Object.is;
    let propCache = new WeakMap();
    let pathCache = new WeakMap();
    let proxyCache = new WeakMap();
    let boundUpdateDataLayer;

    const handleChange = (path, property, previous, value) =&gt; {
      if (isUnsubscribed) {
        return;
      }

      if (!inApply) {
        boundUpdateDataLayer(concatPath(path, property), value, previous);
        return;
      }

      if (
        inApply &amp;&amp;
        applyPrevious &amp;&amp;
        previous !== undefined &amp;&amp;
        value !== undefined &amp;&amp;
        property !== "length"
      ) {
        let item = applyPrevious;

        if (path !== applyPath) {
          const appliedPath = path.replace(applyPath, "").slice(1);

          walkPath(appliedPath, key =&gt; {
            item[key] = shallowClone(item[key]);
            item = item[key];
          });
        }

        item[property] = previous;
      }

      changed = true;
    };

    const getOwnPropertyDescriptor = (target, property) =&gt; {
      let props = propCache ? propCache.get(target) : undefined;

      if (props) {
        return props;
      }

      props = new Map();
      propCache.set(target, props);

      let prop = props.get(property);
      if (!prop) {
        prop = Reflect.getOwnPropertyDescriptor(target, property);
        props.set(property, prop);
      }

      return prop;
    };

    const invalidateCachedDescriptor = (target, property) =&gt; {
      const props = propCache ? propCache.get(target) : undefined;

      if (props) {
        props.delete(property);
      }
    };

    const buildProxy = (value, path) =&gt; {
      if (isUnsubscribed) {
        return value;
      }

      pathCache.set(value, path);

      let proxy = proxyCache.get(value);

      if (proxy === undefined) {
        proxy = new Proxy(value, handler);
        proxyCache.set(value, proxy);
      }

      return proxy;
    };

    const unsubscribe = target =&gt; {
      isUnsubscribed = true;
      propCache = null;
      pathCache = null;
      proxyCache = null;

      return target;
    };

    const ignoreChange = property =&gt;
      isUnsubscribed ||
      (options.ignoreSymbols === true &amp;&amp; typeof property === "symbol");

    const handler = {
      get(target, property, receiver) {
        if (property === proxyTarget || property === TARGET) {
          return target;
        }

        if (property === UNSUBSCRIBE &amp;&amp; pathCache.get(target) === "") {
          return unsubscribe(target);
        }

        const value = Reflect.get(target, property, receiver);
        if (
          isPrimitive(value) ||
          isBuiltinWithoutMutableMethods(value) ||
          property === "constructor" ||
          options.isShallow === true
        ) {
          return value;
        }

        // Preserve invariants
        const descriptor = getOwnPropertyDescriptor(target, property);
        if (descriptor &amp;&amp; !descriptor.configurable) {
          if (descriptor.set &amp;&amp; !descriptor.get) {
            return undefined;
          }

          if (descriptor.writable === false) {
            return value;
          }
        }

        return buildProxy(value, concatPath(pathCache.get(target), property));
      },

      set(target, property, value, receiver) {
        const proxyTargetValue =
          value &amp;&amp; value[proxyTarget] !== undefined
            ? value[proxyTarget]
            : value;

        const ignore = ignoreChange(property);
        const previous = ignore
          ? null
          : Reflect.get(target, property, receiver);
        const result = Reflect.set(
          target[proxyTarget] || target,
          property,
          proxyTargetValue
        );

        if (!ignore &amp;&amp; !equals(previous, proxyTargetValue)) {
          handleChange(
            pathCache.get(target),
            property,
            previous,
            proxyTargetValue
          );
        }

        return result;
      },

      defineProperty(target, property, descriptor) {
        const result = Reflect.defineProperty(target, property, descriptor);

        if (!ignoreChange(property)) {
          invalidateCachedDescriptor(target, property);

          handleChange(
            pathCache.get(target),
            property,
            undefined,
            descriptor.value
          );
        }

        return result;
      },

      deleteProperty(target, property) {
        if (!Reflect.has(target, property)) {
          return true;
        }

        const ignore = ignoreChange(property);
        const previous = ignore ? null : Reflect.get(target, property);
        const result = Reflect.deleteProperty(target, property);

        if (!ignore) {
          invalidateCachedDescriptor(target, property);

          handleChange(pathCache.get(target), property, previous);
        }

        return result;
      },

      apply(target, thisArg, argumentsList) {
        const compare = isBuiltinWithMutableMethods(proxyTargetThisArg);

        const proxyTargetThisArg = compare ? thisArg[proxyTarget] : thisArg;

        if (!inApply) {
          inApply = true;

          if (compare) {
            applyPrevious = proxyTargetThisArg.valueOf();
          }

          if (
            Array.isArray(proxyTargetThisArg) ||
            toString.call(proxyTargetThisArg) === "[object Object]"
          ) {
            applyPrevious = shallowClone(proxyTargetThisArg[proxyTarget]);
          }

          applyPath = pathCache.get(target);
          applyPath = applyPath.slice(
            0,
            Math.max(applyPath.lastIndexOf(PATH_SEPARATOR), 0)
          );

          const result = Reflect.apply(
            target,
            proxyTargetThisArg,
            argumentsList
          );

          inApply = false;

          if (
            changed ||
            (compare &amp;&amp; !equals(applyPrevious, proxyTargetThisArg.valueOf()))
          ) {
            handleChange(
              applyPath,
              "",
              applyPrevious,
              proxyTargetThisArg[proxyTarget] || proxyTargetThisArg
            );
            applyPrevious = null;
            changed = false;
          }

          return result;
        }

        return Reflect.apply(target, proxyTargetThisArg, argumentsList);
      }
    };

    const proxy = buildProxy(object, "");
    boundUpdateDataLayer = updateDataLayer.bind(proxy);

    return proxy;
  };

  onChange.target = proxy =&gt; proxy[TARGET] || proxy;
  onChange.unsubscribe = proxy =&gt; proxy[UNSUBSCRIBE] || proxy;

  let proxy;
  let previousDataLayer;

  function _serialize(dataLayer) {
    try {
      return JSON.stringify({ ...dataLayer }, null, 2);
    } catch (e) {
      return JSON.stringify(dataLayer, null, 2);
    }
  }

  function _notify(dataLayer) {
    contentScriptEventTrigger({
      data: {
        dataLayer
      },
      timestamp: Date.now(),
      timeSincePageLoad: window.performance.now()
    });
  }

  function onDataLayerUpdate() {
    const dataLayer = _serialize(this);

    if (previousDataLayer !== dataLayer) {
      previousDataLayer = dataLayer;
      _notify(dataLayer);
    }
  }

  function onDataLayerSet(newDataLayer) {
    const dataLayer = _serialize(newDataLayer);
    if (!previousDataLayer || previousDataLayer !== dataLayer) {
      previousDataLayer = dataLayer;
      _notify(dataLayer);
    }
  }

  Object.defineProperty(window, dataLayerKey, {
    get() {
      return proxy;
    },
    set(newDataLayer) {
      onDataLayerSet(newDataLayer);
      proxy = onChange(newDataLayer, onDataLayerUpdate);
    },
    enumerable: true,
    configurable: true
  });

  const oldObjectDefine = Object.defineProperty.bind(Object);
  Object.defineProperty = (obj, prop, descriptor) =&gt; {
    if (prop === dataLayerKey) {
      console.debug(
        "Data layer being overwritten by Object.defineProperty(). Falling back to polling..."
      );

      function pollForChanges() {
        const dataLayer = _serialize(window[dataLayerKey]);
        if (previousDataLayer !== dataLayer) {
          previousDataLayer = dataLayer;
          _notify(dataLayer);
        }
        window.requestAnimationFrame(pollForChanges);
      }

      window.requestAnimationFrame(pollForChanges);
    }
    return oldObjectDefine(obj, prop, descriptor);
  };
}

		})();
	</script><script xmlns="">
		(function() {
			const contentScriptEventTrigger = function(data) {
				window.postMessage({ id:'adobeExperienceCloudDebuggerContentMessagingIdentifier-2', data: data });
			}
			// https://github.com/adobe/alloy/wiki/Monitoring-Hooks

// This script is run within an immediately executed function, so variables declared here
// are local to this script only.
const orgIdsByInstanceName = {};

window.__alloyMonitors = window.__alloyMonitors || [];
window.__alloyMonitors.push({
  onBeforeNetworkRequest(data) {
    setTimeout(() =&gt; {
      contentScriptEventTrigger({
        name: "onAlloyNetworkRequest",
        data: {
          ...data,
          orgId: orgIdsByInstanceName[data.instanceName]
        }
      });
    });
  },
  onNetworkResponse(data) {
    // There are fields in data that don't serialize well, so we only include parsedBody
    setTimeout(() =&gt; {
      contentScriptEventTrigger({
        name: "onAlloyNetworkResponse",
        data: {
          parsedBody: data.parsedBody,
          orgId: orgIdsByInstanceName[data.instanceName]
        }
      });
    });
  },
  onNetworkError(data) {
    setTimeout(() =&gt; {
      contentScriptEventTrigger({ name: "onAlloyNetworkError", data });
    });
  },
  onInstanceConfigured(data) {
    // We keep a cache of orgIdsByInstanceNames here because the response to getLibraryInfo
    // may happen after a network request already occurred.
    orgIdsByInstanceName[data.instanceName] = data.config.orgId;
    setTimeout(() =&gt; {
      window[data.instanceName]("getLibraryInfo").then(({ libraryInfo }) =&gt; {
        // The configuration section uses debugEnabled to know the initial state
        const debugEnabledSessionStorage = window.sessionStorage.getItem(
          `com.adobe.alloy.instance.${data.instanceName}.debug`
        );
        const debugEnabled =
          debugEnabledSessionStorage === "true" ||
          (data.config.debugEnabled &amp;&amp; debugEnabledSessionStorage === null);

        contentScriptEventTrigger({
          name: "onInstanceConfigured",
          data: {
            namespace: data.instanceName,
            edgeConfigId: data.config.edgeConfigId,
            edgeDomain: data.config.edgeDomain,
            orgId: data.config.orgId,
            // we only use the version (for now), so we don't need to send anything else.
            libraryInfo: {
              version: libraryInfo.version
            },
            debugEnabled
          }
        });
      });
    });
  }
});

		})();
	</script><script xmlns="">
		(function() {
			const contentScriptEventTrigger = function(data) {
				window.postMessage({ id:'adobeExperienceCloudDebuggerContentMessagingIdentifier-3', data: data });
			}
			/**
 * Hooks into both DTM's and Launch's logging mechanisms in order to capture all log messages and
 * send them to the UI to display to the user
 */
function notifyContentScript(log) {
  contentScriptEventTrigger({
    data: log,
    timestamp: Date.now(),
    timeSincePageLoad: window.performance.now()
  });
}

// Create a stub _satellite with the common methods. Without this, this injected script will
// break pages that have logic on them like "window._satellite &amp;&amp; window._satellite.pageBottom()"
const noop = () =&gt; {};
const satelliteStub = {};
[
  "getVar",
  "getVisitorId",
  "notify",
  "pageBottom",
  "readCookie",
  "setCookie",
  "setDebug",
  "setVar",
  "track"
].forEach(prop =&gt; {
  satelliteStub[prop] = noop;
});

window._satellite = {
  ...satelliteStub,
  ...window._satellite
};
window._satellite.override = window._satellite.override || {};

// Hook into _satellite in order to capture DTM logs
if (window.Object &amp;&amp; window.Object.defineProperty) {
  window.Object.defineProperty(
    window._satellite.override,
    "adobe.aepDebugger.dtmInitHook",
    {
      enumerable: true,
      get() {
        onSatelliteInit();
        return "";
      },
      set() {}
    }
  );
}

function onSatelliteInit() {
  // This function will run when DTM is loaded on the page. We use it to hook into DTM logs
  const _satellite = window._satellite;
  if (_satellite.Logger) {
    _satellite.Logger.keepLimit = 9999;
  }

  // override notify
  // Reason: we want to intercept messages that go through here
  // without worrying about limits or messing anything up internally
  const originalNotify = _satellite.notify;
  _satellite.notify = (message, level) =&gt; {
    const logLevel = ["log", "log", "log", "info", "warn", "error"];

    // call original
    originalNotify(message, level);

    const log = {
      solution: "dtm",
      solutions: ["dtm"],
      level: logLevel[level] || "log",
      message: ""
    };

    // make sure that we have a message
    if (message &amp;&amp; typeof message === "string") {
      // only add it
      log.message = message;

      // check to see what solution it came from
      if (message.indexOf("Adobe Analytics:") !== -1) {
        log.solutions.push("analytics");
      } else if (message.indexOf("Test &amp; Target:") !== -1) {
        log.solutions.push("target");
      } else if (message.indexOf("Visitor ID:") !== -1) {
        log.solutions.push("visitorService");
      } else if (message.indexOf("AdLens:") !== -1) {
        log.solutions.push("mediaOptimizer");
      }
    }
    notifyContentScript(log);
  };
}

function _overrideConsoleLogFunction(prefix, solution, level) {
  const originalFunction = console[level];
  console[level] = (...args) =&gt; {
    const argsAsArray = Array.prototype.slice.call(args);
    originalFunction.apply(console, argsAsArray);
    const mappedArgs = argsAsArray.map(arg =&gt; {
      let result = "";
      if (arg &amp;&amp; typeof arg.toString === "function") {
        result = arg.toString();
      }
      if (!result || result === "[object Object]") {
        try {
          result = JSON.stringify(arg);
        } catch (e) {
          return "";
        }
      }
      return result;
    });

    const message = mappedArgs.join(" ");

    if (typeof message === "string") {
      if (message.indexOf(prefix) === 0) {
        const log = {
          solution,
          solutions: [solution],
          level,
          message,
          searchIndex: message,
          params: mappedArgs
        };

        // check to see what solution it came from
        if (message.indexOf("[Adobe Analytics]") !== -1) {
          log.solutions.push("analytics");
        } else if (message.indexOf("[Adobe Target]") !== -1) {
          log.solutions.push("target");
        } else if (message.indexOf("[Experience Cloud ID Service]") !== -1) {
          log.solutions.push("visitorService");
        } else if (message.indexOf("[Adobe Media Optimizer]") !== -1) {
          log.solutions.push("mediaOptimizer");
        }
        notifyContentScript(log);
      }
    }
  };
}

/**
 * Overrides the various console.* methods in order to intercept messages that
 * are sent to the console by launch. A message was sent be launch if it starts
 * with the rocket emoji 🚀. Note that this is a somewhat brittle solution
 * since if the emoji ever changes this integration will break. However this
 * is the only solution that works for now.
 *
 * Any messages that are not prefixed with the rocket emoji are ignored and passed
 * through to the original console function
 */
function _overrideConsoleForLaunch() {
  const prefix = "\uD83D\uDE80";
  ["error", "info", "log", "warn"].forEach(
    _overrideConsoleLogFunction.bind(null, prefix, "launch")
  );
}

/**
 * Intercepts console messages made by alloy (prefixed with [alloy]) and notifies content script about each one.
 * Note that this is a brittle solution and should not be used long term.
 *
 * Ideally there will be some debugging hooks built into alloy itself that we can connect to
 */
function _overrideConsoleForAlloy() {
  window.__alloyNS = [];
  const originalPush = window.__alloyNS.push;
  window.__alloyNS.push = (namespace, ...rest) =&gt; {
    ["error", "info", "log", "warn"].forEach(
      _overrideConsoleLogFunction.bind(null, `[${namespace}]`, "alloy")
    );

    originalPush.apply(
      window.__alloyNS,
      Array.prototype.slice.call([namespace, ...rest])
    );
  };
}

/**
 * Overrides console.debug and console.warn methods in order to intercept messages that
 * are sent to the console by at.js. A message was sent be at.js if it starts
 * with "AT:".
 *
 * Note that this is a somewhat brittle solution
 * since if the prefix ever changes this integration will break. However this
 * is the only solution that works for now, since at.js does not have any debugging hooks.
 * If this ever breaks, the first place to look is at the logger implementation in at.js
 * to see if they changed the prefix or started using different console functions. Check
 * https://git.corp.adobe.com/TnT/atjs-library-v2/blob/master/src/delivery/monitoring/logger/helper.js
 *
 * Any messages that are not prefixed with "AT:" are ignored and passed
 * through to the original console function
 */
function _overrideConsoleForAtJs() {
  const prefix = "AT:";
  ["debug", "warn"].forEach(
    _overrideConsoleLogFunction.bind(null, prefix, "target")
  );
}

_overrideConsoleForLaunch();
_overrideConsoleForAlloy();
_overrideConsoleForAtJs();

// Once the page has finished loading, remove _satellite if both DTM and Launch were not found
window.addEventListener("load", () =&gt; {
  if (!_hasDtm() &amp;&amp; !_hasLaunch()) {
    delete window._satellite;
  }
});

/**
 * @returns {boolean} whether launch is present on the page
 */
function _hasLaunch() {
  return !!(window._satellite &amp;&amp; window._satellite._container);
}

/**
 * @returns {boolean} whether DTM is present on the page
 */
function _hasDtm() {
  return !!(window._satellite &amp;&amp; window._satellite.configurationSettings);
}

		})();
	</script><script xmlns="">
		(function() {
			const contentScriptEventTrigger = function(data) {
				window.postMessage({ id:'adobeExperienceCloudDebuggerContentMessagingIdentifier-4', data: data });
			}
			window.___target_traces = window.___target_traces || [];
const originalPush = window.___target_traces.push;

window.___target_traces.push = function targetTracePush(trace) {
  contentScriptEventTrigger({ trace });
  originalPush.call(this, trace);
};

		})();
	</script>
<path d="M116.741 13.7202V0.572876H119.352L125.04 9.1513V0.572876H127.837V13.7202H125.226L119.538 5.14182V13.7202H116.741Z" fill="white"/>
<path d="M130.448 13.7202V0.572876H139.026V2.99721H133.339V5.88777H138.56V8.31211H133.339V11.3892H139.213V13.627L130.448 13.7202Z" fill="white"/>
<path d="M144.621 13.7202V2.90397H140.705V0.572876H151.241V2.99721H147.325V13.7202H144.621Z" fill="white"/>
<path d="M153.013 13.0676V11.5757C154.225 12.1352 155.531 12.4149 156.836 12.4149C157.675 12.5082 158.514 12.2284 159.167 11.8555C159.727 11.4825 160.006 10.8298 160.006 10.1771C160.006 9.71085 159.82 9.24463 159.447 8.87166C158.887 8.40544 158.235 8.03246 157.582 7.84598L156.183 7.28651C155.251 7.00678 154.412 6.44732 153.666 5.79461C153.199 5.23515 152.92 4.58244 152.92 3.83649C152.92 2.81081 153.386 1.87838 154.132 1.22567C155.158 0.572963 156.277 0.199988 157.489 0.293232C158.141 0.293232 158.701 0.386475 159.354 0.479719C159.913 0.572963 160.472 0.75945 160.939 1.03918V2.53108C159.913 2.06486 158.701 1.78513 157.582 1.69189C155.624 1.69189 154.598 2.34459 154.598 3.65001C154.598 4.11623 154.785 4.4892 155.158 4.76893C155.717 5.23515 156.37 5.51488 157.022 5.79461L158.421 6.35407C159.354 6.63381 160.286 7.19327 161.032 7.93922C161.498 8.49868 161.778 9.24463 161.778 10.0838C161.871 11.1095 161.405 12.1352 160.566 12.7879C159.54 13.5338 158.328 13.8136 157.116 13.8136C156.649 13.8136 156.183 13.8136 155.717 13.7203C155.251 13.6271 154.785 13.5338 154.318 13.4406C153.666 13.4406 153.293 13.2541 153.013 13.0676Z" fill="white"/>
<path d="M163.829 7.75264V0.572876H165.508V7.75264C165.508 9.33779 165.787 10.55 166.347 11.2959C167.652 12.6946 169.89 12.881 171.289 11.5756C171.382 11.4824 171.475 11.3891 171.569 11.2959C172.128 10.55 172.408 9.33779 172.408 7.75264V0.572876H174.086V7.84589C174.086 9.99049 173.62 11.4824 172.781 12.5081C171.941 13.5338 170.636 14 168.958 14C167.279 14 165.974 13.5338 165.135 12.5081C164.296 11.4824 163.829 9.89725 163.829 7.75264Z" fill="white"/>
<path d="M176.883 13.7202V0.572876H178.562V13.7202H176.883Z" fill="white"/>
<path d="M184.996 13.7202V1.97153H180.893V0.572876H190.87V1.97153H186.674V13.627H184.996V13.7202Z" fill="white"/>
<path d="M193.108 13.7202V0.572876H201.22V1.97153H194.786V6.26074H200.661V7.6594H194.786V12.1351H201.406V13.5338H193.108V13.7202Z" fill="white"/>
<path d="M46.3421 9.05808H53.4287L49.6989 2.99724L42.7989 13.9068H39.6286L48.0205 0.852634C48.6732 -0.0798037 49.8854 -0.266291 50.8178 0.386415C51.0043 0.479659 51.1908 0.572903 51.2841 0.75939L59.676 13.9068H56.5057L55.0138 11.4824H47.834L46.3421 9.05808ZM78.8842 11.4824V0.106684H76.1801V12.6013C76.1801 12.9743 76.3666 13.2541 76.5531 13.5338C76.8328 13.8135 77.1126 13.9068 77.4855 13.9068H89.6072L91.1924 11.4824H78.8842ZM34.9664 9.43106C37.5772 9.43106 39.6286 7.37969 39.6286 4.76887C39.6286 2.15805 37.5772 0.106684 34.9664 0.106684H23.3109V13.9068H26.015V2.53102H34.7799C35.9921 2.62426 36.9245 3.64995 36.9245 4.86211C36.8313 5.98104 35.9921 6.91348 34.7799 7.00672H27.3204L35.2461 13.9068H39.0691L33.7542 9.43106H34.9664ZM6.99328 13.9068H15.0122C18.8352 13.9068 21.9123 10.8297 21.9123 7.00672C21.9123 3.18373 18.8352 0.106684 15.0122 0.106684H6.99328C3.17029 0.106684 0 3.18373 0 7.00672C0 10.8297 3.17029 13.9068 6.99328 13.9068ZM14.8258 11.4824H7.08652C4.66219 11.3892 2.70407 9.33781 2.79731 6.82023C2.89056 4.48914 4.75543 2.62426 7.08652 2.53102H14.8258C17.2501 2.43778 19.3947 4.3959 19.4879 6.82023C19.5812 9.24457 17.6231 11.3892 15.1987 11.4824C15.0122 11.4824 14.919 11.4824 14.8258 11.4824ZM65.2706 13.9068H73.4761L75.0612 11.4824H65.4571C63.0328 11.5757 60.8882 9.61755 60.7949 7.19321C60.7017 4.76887 62.6598 2.62426 65.0841 2.53102C65.1774 2.53102 65.2706 2.53102 65.3639 2.53102H73.1963L74.7815 0.106684H65.2706C61.4476 0.106684 58.3706 3.18373 58.3706 7.00672C58.3706 10.8297 61.4476 13.9068 65.2706 13.9068ZM97.8127 11.4824C95.8546 11.4824 94.0829 10.177 93.5235 8.21889H104.899L106.484 5.79455H93.5235C94.0829 3.83643 95.8546 2.53102 97.8127 2.53102H105.645L107.23 0.106684H97.7194C93.8965 0.106684 90.8194 3.18373 90.8194 7.00672C90.8194 10.8297 93.8965 13.9068 97.7194 13.9068H105.925L107.51 11.4824H97.8127Z" fill="white"/>
</svg>